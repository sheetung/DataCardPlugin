# Auto generated by LangBot Plugin SDK.
# Please refer to https://docs.langbot.app/en/plugin/dev/tutor.html for more details.
from __future__ import annotations

import re
import os
import sys
import importlib.util
from langbot_plugin.api.definition.components.common.event_listener import EventListener
from langbot_plugin.api.entities import events, context
from langbot_plugin.api.entities.builtin.platform import message as platform_message
from langbot_plugin.api.entities.builtin.provider import message as provider_message


class DefaultEventListener(EventListener):

    def __init__(self):
        super().__init__()
        # 获取core目录路径
        self.core_dir = os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))), 'core')
    
    async def initialize(self):
        await super().initialize()

        self.llkshop_id = self.plugin.get_config().get("llkshop_id", '3abcd2e80b9b4694')

        @self.handler(events.GroupMessageReceived)
        async def handler(event_context: context.EventContext):
            
            # 获取用户消息文本
            message_text = str(event_context.event.message_chain)
            # 检查是否是流量卡查询命令
            flow_card_pattern = r'^流量卡(.+)$'
            match = re.match(flow_card_pattern, message_text)
            
            if match:
                # 提取查询关键词
                keyword = match.group(1).strip()
                
                # 动态加载datacard_search模块
                module_path = os.path.join(self.core_dir, 'datacard_search.py')
                try:
                    spec = importlib.util.spec_from_file_location('datacard_search', module_path)
                    datacard_module = importlib.util.module_from_spec(spec)
                    spec.loader.exec_module(datacard_module)
                    
                    # 调用流量卡搜索函数，传递配置的llkshop_id
                    result = datacard_module.search_data_cards(keyword, self.llkshop_id)
                except Exception as e:
                    print(f"加载模块失败: {e}")
                    reply_content = ["加载流量卡搜索模块失败，请检查插件配置。"]
                    await event_context.reply(
                        platform_message.MessageChain([
                            platform_message.Plain(text='\n'.join(reply_content)),
                        ])
                    )
                    return
                
                # 构建回复消息
                reply_content = []
                if result['success']:
                    reply_content.append(f"共找到包含{keyword}的 {result['total_count']} 个匹配产品")
                    reply_content.append(f"更多流量卡请到页面店铺查询: {result['shop_link']}")
                    reply_content.append(f"命令详情：\n{result['command_info']}")
                    reply_content.append("\n---\n")
                    
                    # 添加产品详情（限制显示前3个结果，避免消息过长）
                    display_count = min(3, len(result['results']))
                    for i in range(display_count):
                        product = result['results'][i]
                        reply_content.append(product['md图片'])
                        reply_content.append(f"产品名称: {product['产品名称']}")
                        reply_content.append(f"通用流量: {product['通用流量']}")
                        reply_content.append(f"定向流量: {product['定向流量']}")
                        reply_content.append(f"通话时长: {product['通话时长']}")
                        reply_content.append(f"适用年龄: {product['适用年龄']}")
                        reply_content.append(f"详情链接: {product['详情链接']}")
                        reply_content.append("\n---\n")
                    
                    if display_count < len(result['results']):
                        reply_content.append(f"... 还有 {len(result['results']) - display_count} 个结果未显示，请尝试更精确的关键词")
                else:
                    reply_content.append(result['message'])
                    reply_content.append(f"可到页面店铺查询: {result['shop_link']}")
                    reply_content.append(f"命令详情：\n{result['command_info']}")
                    reply_content.append("\n---\n")
                
                # 构建消息链
                message_chain = []
                response_text = '\n'.join(reply_content)
                
                # 检查结果是否包含markdown格式的图片
                # 匹配 ![alt text](image_url) 格式
                last_end = 0
                has_image = False
                
                # 使用compile优化正则表达式性能
                markdown_image_pattern = re.compile(r'!\[(.*?)\]\((http[s]?:\/\/[^)]+)\)')
                
                # 处理所有匹配的图片
                for match in markdown_image_pattern.finditer(response_text):
                    has_image = True
                    start, end = match.span()
                    
                    # 如果图片前面有文本，添加为Plain消息
                    if start > last_end:
                        message_chain.append(platform_message.Plain(text=response_text[last_end:start]))
                    
                    # 提取图片URL并创建Image消息
                    image_url = match.group(2)
                    message_chain.append(platform_message.Image(url=image_url))
                    last_end = end
                
                # 处理剩余文本
                if last_end + 1 < len(response_text) and has_image:
                    message_chain.append(platform_message.Plain(text=response_text[last_end:]))
                elif not has_image:
                    # 普通文本消息
                    message_chain.append(platform_message.Plain(text=response_text))
                
                # 发送消息
                await event_context.reply(
                    platform_message.MessageChain(message_chain)
                )
            else:
                # 默认回复
                await event_context.reply(
                    platform_message.MessageChain([
                        platform_message.Plain(text=f"Hello from LangBot Plugin!\n您可以使用'流量卡<关键词>'命令查询流量卡信息，例如：流量卡19元 或 流量卡广东"),
                    ])
                )